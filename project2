import Data.List
import Data.Char
import Data.List.Split
import Control.Parallel.Strategies
--VARIABLES FOR DEVELOPMENT---------------------------------------------------------------------
testTrueBoard =  [5,4,7,2,1,6,3,6,5,4,3,7,2,1,7,3,6,2,1,5,4,2,1,7,5,4,6,3,1,5,4,3,6,7,2,7,6,2,1,3,5,4,3,5,4,7,2,1,6]
testFalseBoard =  [1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7]
testTrueBoardTwo = [0,0,0,7,6,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0]
testTrueBoardThree = [4,1,2,3,6,0,0,0,0,0,0,1,0,0,0,1,7,4,0,0,2,0,0,0,0,1,0,5,3,0,0,4,0,0,0,0,7,0,0,0,0,0,0,1,2,0,0,0,0] 
testTrueBoardFour = [4,0,5,3,0,1,7,1,7,0,0,0,0,0,0,0,6,0,0,5,2,1,2,3,0,0,0,5,6,0,7,4,0,1,3,0,0,0,0,0,0,0,1,4,0,6,0,7,0] -- Roughly 2.1 billion possible combinations
-----------------------------------------------------------------------------------------------

--Lotus Solver---------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
lotusSolver::[Integer] -> [Integer]
lotusSolver inputBoard = inputBoard
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
--setSingleNode--------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
setSingleNode::[Integer] -> Int -> Integer -> [Integer]
setSingleNode inputBoard nodeToReplace valueToInsert =(take(nodeToReplace -1) inputBoard)
 ++ [valueToInsert] ++(drop (nodeToReplace) inputBoard)
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
--isValidSoFar?!--------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
isValidSoFar::[Integer] -> Bool
isValidSoFar inputList
  |((checkUniqueLefts inputList)  /= True) = False
  |((checkUniqueRights inputList) /= True) = False
  |((checkUniqueRings inputList) /= True) = False
  |otherwise = True  
-----------------------------------------------------------------------------------------------
--IsASolution?!--------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
solutionCheck::[Integer] -> Bool
solutionCheck inputList
  |((checkLefts inputList)  /= True) = False
  |((checkRights inputList) /= True) = False
  |((checkRings inputList) /= True) = False
  |otherwise = True  
-----------------------------------------------------------------------------------------------
---Check Rights----------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
checkRights::[Integer] -> Bool
checkRights  [a1,a2,a3,a4,a5,a6,a7,b1,b2,b3,b4,b5,b6,b7,c1,c2,c3,c4,c5,c6,c7,
               d1,d2,d3,d4,d5,d6,d7,e1,e2,e3,e4,e5,e6,e7,f1,f2,f3,f4,f5,f6,f7,
			   g1,g2,g3,g4,g5,g6,g7] 
			   | ((sort[a1,b1,c2,d2,e3,f3,g4] == compareRing)== False ) = False  
			   | ((sort[a2,b2,c3,d3,e4,f4,g5] == compareRing)== False ) = False 
			   | ((sort[a3,b3,c4,d4,e5,f5,g6] == compareRing)== False ) = False 
			   | ((sort[a4,b4,c5,d5,e6,f6,g7] == compareRing)== False ) = False 
			   | ((sort[a5,b5,c6,d6,e7,f7,g1] == compareRing)== False ) = False 
			   | ((sort[a6,b6,c7,d7,e1,f1,g2] == compareRing)== False ) = False 
			   | ((sort[a7,b7,c1,d1,e2,f2,g3] == compareRing)== False ) = False 
			   | otherwise = True
			   where compareRing = [1,2,3,4,5,6,7]
-----------------------------------------------------------------------------------------------
--Check Lefts ---------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
checkLefts::[Integer] -> Bool
checkLefts  [a1,a2,a3,a4,a5,a6,a7,b1,b2,b3,b4,b5,b6,b7,c1,c2,c3,c4,c5,c6,c7,
               d1,d2,d3,d4,d5,d6,d7,e1,e2,e3,e4,e5,e6,e7,f1,f2,f3,f4,f5,f6,f7,
			   g1,g2,g3,g4,g5,g6,g7] 
			   | ((sort[a1,b7,c7,d6,e6,f5,g5] == compareRing)== False ) = False  
			   | ((sort[a2,b1,c1,d7,e7,f6,g6] == compareRing)== False ) = False 
			   | ((sort[a3,b2,c2,d1,e1,f7,g7] == compareRing)== False ) = False 
			   | ((sort[a4,b3,c3,d2,e2,f1,g1] == compareRing)== False ) = False 
			   | ((sort[a5,b4,c4,d3,e3,f2,g2] == compareRing)== False ) = False 
			   | ((sort[a6,b5,c5,d4,e4,f3,g3] == compareRing)== False ) = False 
			   | ((sort[a7,b6,c6,d5,e5,f4,g4] == compareRing)== False ) = False 
			   | otherwise = True
			   where compareRing = [1,2,3,4,5,6,7]
-----------------------------------------------------------------------------------------------
--check rings----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
checkRings::[Integer] -> Bool
checkRings  [a1,a2,a3,a4,a5,a6,a7,b1,b2,b3,b4,b5,b6,b7,c1,c2,c3,c4,c5,c6,c7,
               d1,d2,d3,d4,d5,d6,d7,e1,e2,e3,e4,e5,e6,e7,f1,f2,f3,f4,f5,f6,f7,
			   g1,g2,g3,g4,g5,g6,g7] 
			   | ((sort[a1,a2,a3,a4,a5,a6,a7] == compareRing)== False ) = False  
			   | ((sort[b1,b2,b3,b4,b5,b6,b7] == compareRing)== False ) = False 
			   | ((sort[c1,c2,c3,c4,c5,c6,c7] == compareRing)== False ) = False 
			   | ((sort[d1,d2,d3,d4,d5,d6,d7] == compareRing)== False ) = False 
			   | ((sort[e1,e2,e3,e4,e5,e6,e7] == compareRing)== False ) = False 
			   | ((sort[f1,f2,f3,f4,f5,f6,f7] == compareRing)== False ) = False
			   | ((sort[g1,g2,g3,g4,g5,g6,g7] == compareRing)== False ) = False 
			   | otherwise = True
			   where compareRing = [1,2,3,4,5,6,7]
-----------------------------------------------------------------------------------------------
---Check Unique Rights----------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
checkUniqueRights::[Integer] -> Bool
checkUniqueRights  [a1,a2,a3,a4,a5,a6,a7,b1,b2,b3,b4,b5,b6,b7,c1,c2,c3,c4,c5,c6,c7,
               d1,d2,d3,d4,d5,d6,d7,e1,e2,e3,e4,e5,e6,e7,f1,f2,f3,f4,f5,f6,f7,
			   g1,g2,g3,g4,g5,g6,g7] 
			   | (((dropZero(sort[a1,b1,c2,d2,e3,f3,g4])) == nub(dropZero(sort[a1,b1,c2,d2,e3,f3,g4]))) == False ) = False  
			   | (((dropZero(sort[a2,b2,c3,d3,e4,f4,g5])) == nub(dropZero(sort[a2,b2,c3,d3,e4,f4,g5])))== False ) = False 
			   | (((dropZero(sort[a3,b3,c4,d4,e5,f5,g6])) == nub(dropZero(sort[a3,b3,c4,d4,e5,f5,g6])))== False ) = False 
			   | (((dropZero(sort[a4,b4,c5,d5,e6,f6,g7])) == nub(dropZero(sort[a4,b4,c5,d5,e6,f6,g7])))== False ) = False 
			   | (((dropZero(sort[a5,b5,c6,d6,e7,f7,g1])) == nub(dropZero(sort[a5,b5,c6,d6,e7,f7,g1])))== False ) = False 
			   | (((dropZero(sort[a6,b6,c7,d7,e1,f1,g2])) == nub(dropZero(sort[a6,b6,c7,d7,e1,f1,g2])))== False ) = False 
			   | (((dropZero(sort[a7,b7,c1,d1,e2,f2,g3])) == nub(dropZero(sort[a7,b7,c1,d1,e2,f2,g3])))== False ) = False 
			   | otherwise = True
-----------------------------------------------------------------------------------------------
--drop zero-----
----------------
dropZero::[Integer] -> [Integer]
dropZero inputList
  | inputList == [] = []
  | (head(inputList) == 0) = dropZero (tail(inputList))
  | otherwise = inputList
--Check Unique Lefts ---------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
checkUniqueLefts::[Integer] -> Bool
checkUniqueLefts  [a1,a2,a3,a4,a5,a6,a7,b1,b2,b3,b4,b5,b6,b7,c1,c2,c3,c4,c5,c6,c7,
               d1,d2,d3,d4,d5,d6,d7,e1,e2,e3,e4,e5,e6,e7,f1,f2,f3,f4,f5,f6,f7,
			   g1,g2,g3,g4,g5,g6,g7] 
			   | (((dropZero(sort[a1,b7,c7,d6,e6,f5,g5])) == nub(dropZero(sort[a1,b7,c7,d6,e6,f5,g5]))) == False ) = False  
			   | (((dropZero(sort[a2,b1,c1,d7,e7,f6,g6])) == nub(dropZero(sort[a2,b1,c1,d7,e7,f6,g6]))) == False ) = False 
			   | (((dropZero(sort[a3,b2,c2,d1,e1,f7,g7])) == nub(dropZero(sort[a3,b2,c2,d1,e1,f7,g7]))) == False ) = False 
			   | (((dropZero(sort[a4,b3,c3,d2,e2,f1,g1])) == nub(dropZero(sort[a4,b3,c3,d2,e2,f1,g1]))) == False ) = False 
			   | (((dropZero(sort[a5,b4,c4,d3,e3,f2,g2])) == nub(dropZero(sort[a5,b4,c4,d3,e3,f2,g2]))) == False ) = False 
			   | (((dropZero(sort[a6,b5,c5,d4,e4,f3,g3])) == nub(dropZero(sort[a6,b5,c5,d4,e4,f3,g3]))) == False ) = False 
			   | (((dropZero(sort[a7,b6,c6,d5,e5,f4,g4])) == nub(dropZero(sort[a7,b6,c6,d5,e5,f4,g4]))) == False ) = False 
			   | otherwise = True
-----------------------------------------------------------------------------------------------
--check unique rings----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
checkUniqueRings::[Integer] -> Bool
checkUniqueRings  [a1,a2,a3,a4,a5,a6,a7,b1,b2,b3,b4,b5,b6,b7,c1,c2,c3,c4,c5,c6,c7,
               d1,d2,d3,d4,d5,d6,d7,e1,e2,e3,e4,e5,e6,e7,f1,f2,f3,f4,f5,f6,f7,
			   g1,g2,g3,g4,g5,g6,g7] 
			   | (((dropZero(sort[a1,a2,a3,a4,a5,a6,a7])) == nub(dropZero(sort[a1,a2,a3,a4,a5,a6,a7])))== False ) = False  
			   | (((dropZero(sort[b1,b2,b3,b4,b5,b6,b7])) == nub(dropZero(sort[b1,b2,b3,b4,b5,b6,b7])))== False ) = False 
			   | (((dropZero(sort[c1,c2,c3,c4,c5,c6,c7])) == nub(dropZero(sort[c1,c2,c3,c4,c5,c6,c7])))== False ) = False 
			   | (((dropZero(sort[d1,d2,d3,d4,d5,d6,d7])) == nub(dropZero(sort[d1,d2,d3,d4,d5,d6,d7])))== False ) = False 
			   | (((dropZero(sort[e1,e2,e3,e4,e5,e6,e7])) == nub(dropZero(sort[e1,e2,e3,e4,e5,e6,e7])))== False ) = False 
			   | (((dropZero(sort[f1,f2,f3,f4,f5,f6,f7])) == nub(dropZero(sort[f1,f2,f3,f4,f5,f6,f7])))== False ) = False
			   | (((dropZero(sort[g1,g2,g3,g4,g5,g6,g7])) == nub(dropZero(sort[g1,g2,g3,g4,g5,g6,g7])))== False ) = False 
			   | otherwise = True
-----------------------------------------------------------------------------------------------
--MAIN-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
main::IO()
main = do
putStrLn("hello world")
-----------------------------------------------------------------------------------------------